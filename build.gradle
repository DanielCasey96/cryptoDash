plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.6'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.diffplug.spotless' version '6.25.0'
}

group = 'uk.casey'
version = '0.0.1-SNAPSHOT'
description = 'cryptoDash'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

configurations {
    acceptanceImplementation.extendsFrom implementation
    acceptanceRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
//    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    testImplementation 'io.rest-assured:rest-assured:5.4.0'

    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.3'
    implementation 'org.mindrot:jbcrypt:0.4'

    implementation("org.springframework.boot:spring-boot-starter-jdbc")
    runtimeOnly("org.postgresql:postgresql")
}

tasks.named('test') {
    useJUnitPlatform()
}

spotless {
    java {
        googleJavaFormat()
    }
}
tasks.register('acceptanceTest', Test) {
    outputs.upToDateWhen { false }

//    dependsOn dockerUp
//    dependsOn 'waitForApp'

    testClassesDirs = sourceSets.acceptance.output.classesDirs
    classpath = sourceSets.acceptance.runtimeClasspath

    useJUnitPlatform{
            description = 'Run local ATs';
            testLogging.showStandardStreams = true;
            }

    reports {
        html.required = true
    }

    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\n Test Results: ${result.resultType}"
            println "Test Summary: ${result.testCount} " +
                    "${result.successfulTestCount} success: " +
                    "${result.failedTestCount} failed: "
        }
    }

//    finalizedBy dockerDown
}

tasks.register('dockerUp') {
    dependsOn 'build'
    doLast {
        exec {
            commandLine 'docker', 'compose', 'up', '--build', '--force-recreate', '-d'
        }
    }
}

tasks.register('dockerDown') {
    doLast {
        exec {
            commandLine 'docker', 'compose', 'down'
        }
    }
}

tasks.register('waitForApp') {
    doLast {
        def maxAttempts = 20
        def attempt = 0
        def url = 'http://localhost:8080/actuator/health'
        while (attempt < maxAttempts) {
            try {
                def connection = new URL(url).openConnection()
                connection.setConnectTimeout(1000)
                connection.setReadTimeout(1000)
                if (connection.responseCode == 200) {
                    println "App is up!"
                    break
                }
            } catch (Exception ignored) {}
            attempt++
            println "Waiting for app... ($attempt/$maxAttempts)"
            sleep(1000)
        }
        if (attempt == maxAttempts) {
            throw new GradleException("App did not start in time")
        }
    }
}

sourceSets {
    acceptance {
        java {
            srcDir 'src/acceptance/java'
        }
        resources {
            srcDir 'src/acceptance/resources'
        }
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
        }
    }
    test {
        java {
            srcDir 'src/test/java'
        }
    }
}

configurations {
    acceptanceImplementation.extendsFrom testImplementation
    acceptanceRuntimeOnly.extendsFrom testRuntimeOnly
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}